import ['EVENTS', 'GITHUB_URL'], '../constants'
import 'Events', '../events'
import 'Net', '../core/net'

export default class ElmProjects < HTMLElement
  def initialize
    super
    @h_elm_greet_loaded = lambda do
      get_data() do |data|
        Events.send(EVENTS[:elm_projects_length], data.length)
        init_elm(data)
      end
    end

    init_spinner()
  end

  def connectedCallback()
    document.addEventListener(EVENTS[:elm_greet_loaded], @h_elm_greet_loaded)
  end

  def disconnectedCallback()
    document.removeEventListener(EVENTS[:elm_greet_loaded], @h_elm_greet_loaded)
  end

  def get_data(&block)
    Net.http_get(GITHUB_URL[:repos]) do |repos|
      repos_filter = lambda do
        result = []
        repos.forEach do |repo|
          if Number(repo.stargazers_count) > 0 && (repo.description &&
              repo.topics.length > 0)

            result << {
              name: repo.name,
              description: repo.description,
              category: repo.topics.slice(0, 3).join(', '),
              url: repo.html_url,
              created_at: repo.created_at.to_date(),
              stargazers_count: repo.stargazers_count,
            }
          end
        end

        result_sort = result.sort(lambda do |a, b|
          a.stargazers_count < b.stargazers_count
        end)

        result_sort
      end

      block(repos_filter()) if block
    end
  end

  def init_elm(data)
    l_acc_item = lambda do
      result = ""

      if data.length == 0
        result = """
        <div class='text-center'>
          <p class='h4 text-muted'>no projects found</p>
        </div>
        """
      end

      (0...data.length).step(1) do |i| project = data[i]
        template = """
        <div class='accordion-item'>
          <h2 class='accordion-header' id='heading_#{i}'>
            <button class='accordion-button collapsed' type='button' data-bs-toggle='collapse' data-bs-target='#collapse_#{i}' aria-expanded='false' aria-controls='collapse_#{i}'>
              <p class='h5 mb-0'>#{project[:name]}</p>
            </button>
          </h2>
          <div id='collapse_#{i}' class='accordion-collapse collapse' aria-labelledby='heading_#{i}' data-bs-parent='#accordionProjects'>
            <div class='accordion-body'>
              
            <div class='mb-3'>
              <div class='row g-0'>
                <div class='container'>
                  <div class='card-body'>
                    <div class='md-html card-text'>#{ project[:description] }</div>
                    <div class='row g-0'>
                      <div class='col-6' style='margin-top: auto; margin-bottom: auto;'>
                        <p class='card-text'><small class='text-muted'>#{project[:category]} | #{ project[:created_at] }</small></p>
                      </div>
                      <div class='col-6 text-center'>
                        <a href='#{project[:url]}' target='_blank' class='btn btn-primary card-text'>See details</a>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>

            </div>
          </div>
        </div>
        """
        result += "#{template}\n"
      end

      return result
    end

    template = """
    <div class='accordion mx-auto col-lg-9' id='accordionProjects'>
      #{l_acc_item.call()}
    </div>
    """

    self.innerHTML = template
  end

  def init_spinner()
    self.innerHTML = "<elm-spinner></elm-spinner>"
  end
end